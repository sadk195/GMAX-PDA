// Generated by view binder compiler. Do not edit!
package com.example.gmax.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gmax.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityI27DtlBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout appView1;

  @NonNull
  public final LinearLayout appView2;

  @NonNull
  public final LinearLayout appView3;

  @NonNull
  public final LinearLayout appView4;

  @NonNull
  public final LinearLayout appView5;

  @NonNull
  public final LinearLayout appView6;

  @NonNull
  public final LinearLayout appView7;

  @NonNull
  public final LinearLayout appView8;

  @NonNull
  public final LinearLayout appView81;

  @NonNull
  public final LinearLayout appView9;

  @NonNull
  public final LinearLayout boxView1;

  @NonNull
  public final LinearLayout boxView2;

  @NonNull
  public final Button btnSave;

  @NonNull
  public final CheckBox chkOutStorage;

  @NonNull
  public final RelativeLayout layoutBody;

  @NonNull
  public final RelativeLayout layoutBtn;

  @NonNull
  public final RelativeLayout layoutMenuTitle;

  @NonNull
  public final LinearLayout lblSubTitle;

  @NonNull
  public final TextView lblViewTitle;

  @NonNull
  public final ListView listOrder;

  @NonNull
  public final EditText moveDate;

  @NonNull
  public final EditText moveQty;

  @NonNull
  public final Spinner spinnerStorage;

  @NonNull
  public final TextView txtDown;

  @NonNull
  public final TextView txtGoodQty;

  @NonNull
  public final TextView txtItemCd;

  @NonNull
  public final TextView txtItemNm;

  @NonNull
  public final TextView txtLocation;

  @NonNull
  public final TextView txtLocationNm;

  @NonNull
  public final TextView txtSlNm;

  @NonNull
  public final TextView txtSpec;

  @NonNull
  public final TextView txtSubTitle;

  @NonNull
  public final TextView txtTrackingNo;

  private ActivityI27DtlBinding(@NonNull RelativeLayout rootView, @NonNull LinearLayout appView1,
      @NonNull LinearLayout appView2, @NonNull LinearLayout appView3,
      @NonNull LinearLayout appView4, @NonNull LinearLayout appView5,
      @NonNull LinearLayout appView6, @NonNull LinearLayout appView7,
      @NonNull LinearLayout appView8, @NonNull LinearLayout appView81,
      @NonNull LinearLayout appView9, @NonNull LinearLayout boxView1,
      @NonNull LinearLayout boxView2, @NonNull Button btnSave, @NonNull CheckBox chkOutStorage,
      @NonNull RelativeLayout layoutBody, @NonNull RelativeLayout layoutBtn,
      @NonNull RelativeLayout layoutMenuTitle, @NonNull LinearLayout lblSubTitle,
      @NonNull TextView lblViewTitle, @NonNull ListView listOrder, @NonNull EditText moveDate,
      @NonNull EditText moveQty, @NonNull Spinner spinnerStorage, @NonNull TextView txtDown,
      @NonNull TextView txtGoodQty, @NonNull TextView txtItemCd, @NonNull TextView txtItemNm,
      @NonNull TextView txtLocation, @NonNull TextView txtLocationNm, @NonNull TextView txtSlNm,
      @NonNull TextView txtSpec, @NonNull TextView txtSubTitle, @NonNull TextView txtTrackingNo) {
    this.rootView = rootView;
    this.appView1 = appView1;
    this.appView2 = appView2;
    this.appView3 = appView3;
    this.appView4 = appView4;
    this.appView5 = appView5;
    this.appView6 = appView6;
    this.appView7 = appView7;
    this.appView8 = appView8;
    this.appView81 = appView81;
    this.appView9 = appView9;
    this.boxView1 = boxView1;
    this.boxView2 = boxView2;
    this.btnSave = btnSave;
    this.chkOutStorage = chkOutStorage;
    this.layoutBody = layoutBody;
    this.layoutBtn = layoutBtn;
    this.layoutMenuTitle = layoutMenuTitle;
    this.lblSubTitle = lblSubTitle;
    this.lblViewTitle = lblViewTitle;
    this.listOrder = listOrder;
    this.moveDate = moveDate;
    this.moveQty = moveQty;
    this.spinnerStorage = spinnerStorage;
    this.txtDown = txtDown;
    this.txtGoodQty = txtGoodQty;
    this.txtItemCd = txtItemCd;
    this.txtItemNm = txtItemNm;
    this.txtLocation = txtLocation;
    this.txtLocationNm = txtLocationNm;
    this.txtSlNm = txtSlNm;
    this.txtSpec = txtSpec;
    this.txtSubTitle = txtSubTitle;
    this.txtTrackingNo = txtTrackingNo;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityI27DtlBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityI27DtlBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_i27_dtl, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityI27DtlBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.app_view1;
      LinearLayout appView1 = ViewBindings.findChildViewById(rootView, id);
      if (appView1 == null) {
        break missingId;
      }

      id = R.id.app_view2;
      LinearLayout appView2 = ViewBindings.findChildViewById(rootView, id);
      if (appView2 == null) {
        break missingId;
      }

      id = R.id.app_view3;
      LinearLayout appView3 = ViewBindings.findChildViewById(rootView, id);
      if (appView3 == null) {
        break missingId;
      }

      id = R.id.app_view4;
      LinearLayout appView4 = ViewBindings.findChildViewById(rootView, id);
      if (appView4 == null) {
        break missingId;
      }

      id = R.id.app_view5;
      LinearLayout appView5 = ViewBindings.findChildViewById(rootView, id);
      if (appView5 == null) {
        break missingId;
      }

      id = R.id.app_view6;
      LinearLayout appView6 = ViewBindings.findChildViewById(rootView, id);
      if (appView6 == null) {
        break missingId;
      }

      id = R.id.app_view7;
      LinearLayout appView7 = ViewBindings.findChildViewById(rootView, id);
      if (appView7 == null) {
        break missingId;
      }

      id = R.id.app_view8;
      LinearLayout appView8 = ViewBindings.findChildViewById(rootView, id);
      if (appView8 == null) {
        break missingId;
      }

      id = R.id.app_view8_1;
      LinearLayout appView81 = ViewBindings.findChildViewById(rootView, id);
      if (appView81 == null) {
        break missingId;
      }

      id = R.id.app_view9;
      LinearLayout appView9 = ViewBindings.findChildViewById(rootView, id);
      if (appView9 == null) {
        break missingId;
      }

      id = R.id.box_view1;
      LinearLayout boxView1 = ViewBindings.findChildViewById(rootView, id);
      if (boxView1 == null) {
        break missingId;
      }

      id = R.id.box_view2;
      LinearLayout boxView2 = ViewBindings.findChildViewById(rootView, id);
      if (boxView2 == null) {
        break missingId;
      }

      id = R.id.btn_save;
      Button btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.chk_out_storage;
      CheckBox chkOutStorage = ViewBindings.findChildViewById(rootView, id);
      if (chkOutStorage == null) {
        break missingId;
      }

      id = R.id.layout_body;
      RelativeLayout layoutBody = ViewBindings.findChildViewById(rootView, id);
      if (layoutBody == null) {
        break missingId;
      }

      id = R.id.layout_btn;
      RelativeLayout layoutBtn = ViewBindings.findChildViewById(rootView, id);
      if (layoutBtn == null) {
        break missingId;
      }

      id = R.id.layout_menu_title;
      RelativeLayout layoutMenuTitle = ViewBindings.findChildViewById(rootView, id);
      if (layoutMenuTitle == null) {
        break missingId;
      }

      id = R.id.lbl_sub_title;
      LinearLayout lblSubTitle = ViewBindings.findChildViewById(rootView, id);
      if (lblSubTitle == null) {
        break missingId;
      }

      id = R.id.lbl_view_title;
      TextView lblViewTitle = ViewBindings.findChildViewById(rootView, id);
      if (lblViewTitle == null) {
        break missingId;
      }

      id = R.id.listOrder;
      ListView listOrder = ViewBindings.findChildViewById(rootView, id);
      if (listOrder == null) {
        break missingId;
      }

      id = R.id.move_date;
      EditText moveDate = ViewBindings.findChildViewById(rootView, id);
      if (moveDate == null) {
        break missingId;
      }

      id = R.id.move_qty;
      EditText moveQty = ViewBindings.findChildViewById(rootView, id);
      if (moveQty == null) {
        break missingId;
      }

      id = R.id.spinner_storage;
      Spinner spinnerStorage = ViewBindings.findChildViewById(rootView, id);
      if (spinnerStorage == null) {
        break missingId;
      }

      id = R.id.txt_down;
      TextView txtDown = ViewBindings.findChildViewById(rootView, id);
      if (txtDown == null) {
        break missingId;
      }

      id = R.id.txt_good_qty;
      TextView txtGoodQty = ViewBindings.findChildViewById(rootView, id);
      if (txtGoodQty == null) {
        break missingId;
      }

      id = R.id.txt_item_cd;
      TextView txtItemCd = ViewBindings.findChildViewById(rootView, id);
      if (txtItemCd == null) {
        break missingId;
      }

      id = R.id.txt_item_nm;
      TextView txtItemNm = ViewBindings.findChildViewById(rootView, id);
      if (txtItemNm == null) {
        break missingId;
      }

      id = R.id.txt_location;
      TextView txtLocation = ViewBindings.findChildViewById(rootView, id);
      if (txtLocation == null) {
        break missingId;
      }

      id = R.id.txt_location_nm;
      TextView txtLocationNm = ViewBindings.findChildViewById(rootView, id);
      if (txtLocationNm == null) {
        break missingId;
      }

      id = R.id.txt_sl_nm;
      TextView txtSlNm = ViewBindings.findChildViewById(rootView, id);
      if (txtSlNm == null) {
        break missingId;
      }

      id = R.id.txt_spec;
      TextView txtSpec = ViewBindings.findChildViewById(rootView, id);
      if (txtSpec == null) {
        break missingId;
      }

      id = R.id.txt_sub_title;
      TextView txtSubTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtSubTitle == null) {
        break missingId;
      }

      id = R.id.txt_tracking_no;
      TextView txtTrackingNo = ViewBindings.findChildViewById(rootView, id);
      if (txtTrackingNo == null) {
        break missingId;
      }

      return new ActivityI27DtlBinding((RelativeLayout) rootView, appView1, appView2, appView3,
          appView4, appView5, appView6, appView7, appView8, appView81, appView9, boxView1, boxView2,
          btnSave, chkOutStorage, layoutBody, layoutBtn, layoutMenuTitle, lblSubTitle, lblViewTitle,
          listOrder, moveDate, moveQty, spinnerStorage, txtDown, txtGoodQty, txtItemCd, txtItemNm,
          txtLocation, txtLocationNm, txtSlNm, txtSpec, txtSubTitle, txtTrackingNo);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
