// Generated by view binder compiler. Do not edit!
package com.example.gmax.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gmax.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListViewS13QueryBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView bpNm;

  @NonNull
  public final TextView dnNo;

  @NonNull
  public final TextView movType;

  @NonNull
  public final TextView plantCd;

  @NonNull
  public final TextView promiseDt;

  @NonNull
  public final TextView salesGrpNm;

  @NonNull
  public final TextView shipToPaty;

  @NonNull
  public final TextView soType;

  @NonNull
  public final TextView transMeth;

  private ListViewS13QueryBinding(@NonNull LinearLayout rootView, @NonNull TextView bpNm,
      @NonNull TextView dnNo, @NonNull TextView movType, @NonNull TextView plantCd,
      @NonNull TextView promiseDt, @NonNull TextView salesGrpNm, @NonNull TextView shipToPaty,
      @NonNull TextView soType, @NonNull TextView transMeth) {
    this.rootView = rootView;
    this.bpNm = bpNm;
    this.dnNo = dnNo;
    this.movType = movType;
    this.plantCd = plantCd;
    this.promiseDt = promiseDt;
    this.salesGrpNm = salesGrpNm;
    this.shipToPaty = shipToPaty;
    this.soType = soType;
    this.transMeth = transMeth;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListViewS13QueryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListViewS13QueryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_view_s13_query, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListViewS13QueryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bp_nm;
      TextView bpNm = ViewBindings.findChildViewById(rootView, id);
      if (bpNm == null) {
        break missingId;
      }

      id = R.id.dn_no;
      TextView dnNo = ViewBindings.findChildViewById(rootView, id);
      if (dnNo == null) {
        break missingId;
      }

      id = R.id.mov_type;
      TextView movType = ViewBindings.findChildViewById(rootView, id);
      if (movType == null) {
        break missingId;
      }

      id = R.id.plant_cd;
      TextView plantCd = ViewBindings.findChildViewById(rootView, id);
      if (plantCd == null) {
        break missingId;
      }

      id = R.id.promise_dt;
      TextView promiseDt = ViewBindings.findChildViewById(rootView, id);
      if (promiseDt == null) {
        break missingId;
      }

      id = R.id.sales_grp_nm;
      TextView salesGrpNm = ViewBindings.findChildViewById(rootView, id);
      if (salesGrpNm == null) {
        break missingId;
      }

      id = R.id.ship_to_paty;
      TextView shipToPaty = ViewBindings.findChildViewById(rootView, id);
      if (shipToPaty == null) {
        break missingId;
      }

      id = R.id.so_type;
      TextView soType = ViewBindings.findChildViewById(rootView, id);
      if (soType == null) {
        break missingId;
      }

      id = R.id.trans_meth;
      TextView transMeth = ViewBindings.findChildViewById(rootView, id);
      if (transMeth == null) {
        break missingId;
      }

      return new ListViewS13QueryBinding((LinearLayout) rootView, bpNm, dnNo, movType, plantCd,
          promiseDt, salesGrpNm, shipToPaty, soType, transMeth);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
