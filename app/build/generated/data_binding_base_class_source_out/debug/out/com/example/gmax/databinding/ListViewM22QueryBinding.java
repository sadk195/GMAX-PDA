// Generated by view binder compiler. Do not edit!
package com.example.gmax.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gmax.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListViewM22QueryBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView BQTY;

  @NonNull
  public final TextView GQTY;

  @NonNull
  public final TextView INSPECTREQNO;

  @NonNull
  public final TextView INSPQTY;

  @NonNull
  public final TextView LOCATION;

  @NonNull
  public final TextView PRODTORDERNO;

  private ListViewM22QueryBinding(@NonNull LinearLayout rootView, @NonNull TextView BQTY,
      @NonNull TextView GQTY, @NonNull TextView INSPECTREQNO, @NonNull TextView INSPQTY,
      @NonNull TextView LOCATION, @NonNull TextView PRODTORDERNO) {
    this.rootView = rootView;
    this.BQTY = BQTY;
    this.GQTY = GQTY;
    this.INSPECTREQNO = INSPECTREQNO;
    this.INSPQTY = INSPQTY;
    this.LOCATION = LOCATION;
    this.PRODTORDERNO = PRODTORDERNO;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListViewM22QueryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListViewM22QueryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_view_m22_query, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListViewM22QueryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.B_QTY;
      TextView BQTY = ViewBindings.findChildViewById(rootView, id);
      if (BQTY == null) {
        break missingId;
      }

      id = R.id.G_QTY;
      TextView GQTY = ViewBindings.findChildViewById(rootView, id);
      if (GQTY == null) {
        break missingId;
      }

      id = R.id.INSPECT_REQ_NO;
      TextView INSPECTREQNO = ViewBindings.findChildViewById(rootView, id);
      if (INSPECTREQNO == null) {
        break missingId;
      }

      id = R.id.INSP_QTY;
      TextView INSPQTY = ViewBindings.findChildViewById(rootView, id);
      if (INSPQTY == null) {
        break missingId;
      }

      id = R.id.LOCATION;
      TextView LOCATION = ViewBindings.findChildViewById(rootView, id);
      if (LOCATION == null) {
        break missingId;
      }

      id = R.id.PRODT_ORDER_NO;
      TextView PRODTORDERNO = ViewBindings.findChildViewById(rootView, id);
      if (PRODTORDERNO == null) {
        break missingId;
      }

      return new ListViewM22QueryBinding((LinearLayout) rootView, BQTY, GQTY, INSPECTREQNO, INSPQTY,
          LOCATION, PRODTORDERNO);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
